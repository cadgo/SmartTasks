#!/bin/bash
varSid=$(mgmt_cli -r true -f json login | jq -r '.sid')
curl_cli -kLs https://raw.githubusercontent.com/jimoq/SmartTasks/master/PostInstall/policy_sanity_check_script.sh > policy_sanity_check_script.sh 
# Adding the policy_sanity_check_script.sh to the script repository on the management server
mgmt_cli --session-id $varSid -f json add-generic-object create com.checkpoint.management.cdm.objects.scripts.Script name "Post Install Policy Sanity Check Script" body "$(base64 policy_sanity_check_script.sh -w 0)" comments "This script validates that the installed policy allows business critical applications traffic, if needed revert to last good known policy and open a incident ticket in ServiceNow" | jq .name
# Adding the smart-task Policy Sanity Check to the management server
mgmt_cli --session-id $varSid -f json add smart-task name "Policy Sanity Check" color "violet red" description "Run a sanity check script to check if the administrator made a policy change that blocks business critical applications traffic, if needed revert to last good known policy and open a incident ticket in ServiceNow" enabled true trigger "After Install Policy" custom-data '{\n"smarttask_servicenow_user": "my_automation_user_for_service_now", \n"smarttask_servicenow_password": "my_automation_user_password", \n"smarttask_servicenow_host": "my_servicenow_instance_fqdn", \n\n"short_description": "Check Point SmartTask has reverted to last good known policy since critical traffic was blocked due to your policy installation on gateway(s):", \n\n"comments": "policy has been automatically reverted to last good known policy by Check Point SmartTasks. This has been done due to failed sanity check of critical business applications traffic. Verify and adjust your policy changes accordingly and install your updated policy."\n}' action.run-script.repository-script "Post Install Policy Sanity Check Script"
mgmt_cli --session-id $varSid -f show package name standard | jq -r '."installation-targets-revision"[].revision.uid' > /tmp/policy_revision_uid.out
mgmt_cli --session-id $varSid -f json publish
mgmt_cli --session-id $varSid -f json logout
